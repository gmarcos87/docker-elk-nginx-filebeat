version: '3.2'

services:
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
    networks:
      - nginx-proxy

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5000:5000"
      - "9600:9600"
    expose:
      - "5044"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - nginx-proxy
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - nginx-proxy
    depends_on:
      - elasticsearch

  nginx:
    image: nginxproxy/nginx-proxy:alpine
    restart: "always"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - nginx-proxy
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - "nginx-conf-volume:/etc/nginx/conf.d"
      - "nginx-vhost-volume:/etc/nginx/vhost.d"
      - "nginx-html-volume:/usr/share/nginx/html"
      - "nginx-certs-volume:/etc/nginx/certs:ro"
      - "nginx-logs-volume:/var/log/nginx"

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    container_name: letsencrypt-nginx-proxy-companion
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "nginx-conf-volume:/etc/nginx/conf.d"
      - "nginx-vhost-volume:/etc/nginx/vhost.d"
      - "nginx-html-volume:/usr/share/nginx/html"
      - "nginx-certs-volume:/etc/nginx/certs:rw"
    depends_on:
      - nginx-proxy

  filebeat:
    build: ./filebeat
    entrypoint: "filebeat -e -strict.perms=false"
    volumes:
      - ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - "nginx-logs-volume:/var/log/nginx"
    networks:
      - nginx-proxy
    depends_on:
      - nginx
      - logstash
      - elasticsearch
      - kibana
    links:
      - logstash

networks:
  nginx-proxy:
    driver: bridge

volumes:
  nginx-conf-volume:
    driver: local
    driver_opts:
      type: "nfs"
      o: addr=192.168.178.129,nolock,soft,rw
      device: ":/volume1/docker/nginx/conf"
  nginx-vhost-volume:
    driver: local
    driver_opts:
      type: "nfs"
      o: addr=192.168.178.129,nolock,soft,rw
      device: ":/volume1/docker/nginx/vhost"
  nginx-html-volume:
    driver: local
    driver_opts:
      type: "nfs"
      o: addr=192.168.178.129,nolock,soft,rw
      device: ":/volume1/docker/nginx/html"
  nginx-certs-volume:
    driver: local
    driver_opts:
      type: "nfs"
      o: addr=192.168.178.129,nolock,soft,rw
      device: ":/volume1/docker/nginx/certs"
  nginx-logs-volume:
    driver: local
    driver_opts:
      type: "nfs"
      o: addr=192.168.178.129,nolock,soft,rw
      device: ":/volume1/docker/nginx/logs"
  elasticsearch:
    driver: local
    driver_opts:
      type: "nfs"
      o: addr=192.168.178.129,nolock,soft,rw
      device: ":/volume1/docker/nginx/elasticsearch"
